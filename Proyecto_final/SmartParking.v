/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_simpleClockDivider
#(
    parameter maxCounter = 1
)
(
    input cin,
    output cout
);
 /*
  * Don't use a logic signal as clock source in a real world application!
  * Use the on chip clock resources instead!
  */
  reg [31:0] counter;
  reg state;

  assign cout = state;

  always @ (posedge cin) begin
       if (counter == maxCounter) begin
            counter <= 0;
            state <= ~state;
       end
       else begin
          counter <= counter + 1;
       end
  end

endmodule

module SmartParkingLot(
    input infraredSensor0,
    input infraredSensor1,
    input infraredSensor2,
    input infraredSensor3,
    input clk,
    output reg [1:0]led0,
    output reg [1:0]led1,
    output reg [1:0]led2,
    output reg [1:0]led3,
    output reg [7:0] display,
    output [2:0] enable 
);

    parameter zero = 8'b10000001;
    parameter one = 8'b11001111;
    parameter two = 8'b10010010;
    parameter three = 8'b10000110;
    parameter four = 8'b11001100;

    wire [2:0] available_parking = infraredSensor0 + infraredSensor1 + infraredSensor2 + infraredSensor3;

    reg [7:0] displayprm = 8'bx;

    always @(posedge clk)begin
        display = displayprm;
    end

    always @(*) begin
        if(infraredSensor0)
            led0 = 10;
        else 
            led0 = 01; 

        if(infraredSensor1)
            led1 = 10;
        else 
            led1 = 01; 

        if(infraredSensor2)
            led2 = 10;
        else 
            led2 = 01; 

        if(infraredSensor3)
            led3 = 10;
        else 
            led3 = 01; 

        if(available_parking == 4)
            displayprm = four;
        else if(available_parking == 3)
            displayprm = three;
        else if(available_parking == 2)
            displayprm = two;
        else if(available_parking == 1)
            displayprm = one;
        else 
            displayprm = zero;
    end

    assign enable = 3'b110;

endmodule

module SmartParking (
  input clk,
  input sensor1,
  input sensor2,
  input sensor3,
  input sensor0,
  output [1:0] LED0,
  output [1:0] LED1,
  output [1:0] LED2,
  output [1:0] LED3,
  output [7:0] display,
  output [2:0] enable
);
  wire s0;
  DIG_simpleClockDivider #(
    .maxCounter(120)
  )
  DIG_simpleClockDivider_i0 (
    .cin( clk ),
    .cout( s0 )
  );
  // SmartParkingLot
  SmartParkingLot SmartParkingLot_i1 (
    .infraredSensor0( sensor0 ),
    .infraredSensor1( sensor1 ),
    .infraredSensor2( sensor2 ),
    .infraredSensor3( sensor3 ),
    .clk( s0 ),
    .led0( LED0 ),
    .led1( LED1 ),
    .led2( LED2 ),
    .led3( LED3 ),
    .display( display ),
    .enable( enable )
  );
endmodule
